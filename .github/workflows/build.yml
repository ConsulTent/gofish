name: build
on:
  push:
    branches:
    - master
    tags:
    - '*'
jobs:
  build:
    name: build release assets
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        arch: [amd64]
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2

    - name: set the release version (tag)
      if: startsWith(github.ref, 'refs/tags/v')
      run: echo ::set-env name=RELEASE_VERSION::${GITHUB_REF/refs\/tags\//}

    - name: set the release version (master)
      if: github.ref == 'refs/heads/master'
      run: echo ::set-env name=RELEASE_VERSION::canary

    - name: lowercase the runner OS name
      run: |
        OS=$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')
        echo ::set-env name=RUNNER_OS::$OS

    - uses: actions/setup-go@v2
      with:
        go-version: 1.14

    - name: build release assets
      run: |
        make
        mkdir _dist
        cp README.md LICENSE bin/gofish _dist/

    - name: create tar.gz archive
      run: |
        cd _dist
        tar czf gofish-${{ env.RELEASE_VERSION }}-${{ env.RUNNER_OS }}-${{ matrix.arch }}.tar.gz README.md LICENSE gofish

    - name: create zip archive (bash)
      if: matrix.os != 'windows-latest'
      run: |
        cd _dist
        zip gofish-${{ env.RELEASE_VERSION }}-${{ env.RUNNER_OS }}-${{ matrix.arch }}.zip README.md LICENSE gofish

    - name: create zip archive (powershell)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        cd _dist
        Compress-Archive -Path README.md, LICENSE, gofish -DestinationPath gofish-${{ env.RELEASE_VERSION }}-${{ env.RUNNER_OS }}-${{ matrix.arch }}.zip

    - uses: actions/upload-artifact@v1
      with:
        name: gofish
        path: _dist/gofish-${{ env.RELEASE_VERSION }}-${{ env.RUNNER_OS }}-${{ matrix.arch }}.tar.gz

    - uses: actions/upload-artifact@v1
      with:
        name: gofish
        path: _dist/gofish-${{ env.RELEASE_VERSION }}-${{ env.RUNNER_OS }}-${{ matrix.arch }}.zip

  publish:
    name: publish release assets
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: set the release version
        if: startsWith(github.ref, 'refs/tags/v')
        run: echo ::set-env name=RELEASE_VERSION::${GITHUB_REF/refs\/tags\//}

      - name: set the release version
        if: github.ref == 'refs/heads/master'
        run: echo ::set-env name=RELEASE_VERSION::canary

      - name: download release assets
        uses: actions/download-artifact@v1
        with:
          name: gofish

      - name: generate checksums
        run: |
          cd gofish
          sha256sum * > checksums-${{ env.RELEASE_VERSION }}.txt

      - name: upload to azure
        uses: bacongobbler/azure-blob-storage-upload@v1.1.1
        with:
          source_dir: gofish
          container_name: '$web'
          connection_string: ${{ secrets.CONNECTIONSTRING }}
          extra_args: "--destination-path releases"
          sync: false
